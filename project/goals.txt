https://plotly.com/python/colorscales/ (instead of the line plots for the flood zones)

OBJECTIVES:
#####################################################################################
13. make the y-axis tick by 1ft increments
14. make the static value for the 'record' plot attached to the value provided by the xml on the web

18. make all widgets and element sizes a percentage, to help aid with different screen sizes
19. update the style of all widgets somewhere other than layout to reduce complexity.
20. look into replacing the legend with graph annotations (would require a y-axis anchor)
21. get precipitation probability for the next 48 hours, accoompanied with the hourly precipitation type
22. get the precipitation proability for the next 6 days
23. get the daily preciptiation accumulation
24. get the realtime moon phase
25. provide air quality data
26. fire hazard index


FINISHED:
17. display metrics from ClimaCell
    a-'temp',
    b-'feels_like',
    c-'humidity',
    d-'wind_speed',
    e-'wind_gust',
    f-'baro_pressure',
    g-'precipitation',
    h-'precipitation_type',
    i-'sunrise',
    j-'sunset',
    k-'visibility',
    l-'cloud_cover',
    m-'weather_code',
    n-'precipitation_probability',

15. bring in live temperature gauge

12. name traces in in the key/legend
11. make axis ticks and labels white
10. make the observed plot an area chart
9. add current level metric
8. scale Y with zones, change hieght
7. create flood zones for the graph
6. give the flood graph a proper Y range
5. create the graph as a plotly.graph_obj
4. reconfigure for new repository
3. add missing data points to forecasted data so its size is proprotional to the
time lapsed
    a- time (output list complete)
    b- levels (output list complete)
    c- zip and display the data on dash
        d- create bridge data between observed and forecasted (completed)
        e- create a unified date string format (completed)
        f- step through whole pipline, refactoring and tending to objective 'd' (completed) 
2. add the forecasted scatterplot trace to graph
1. return the forecasted dataset
    - seperate out redundant lines of code into new methods from observed getter
